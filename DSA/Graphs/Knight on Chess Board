link-https://www.interviewbit.com/problems/knight-on-chess-board/

public class Solution {
    public int knight(int A, int B, int C, int D, int E, int F) 
    {
        int i=0,j=0,x1=0,y1=0,xf=0,yf=0,moveCnt=0,size=0;
        int [] dx={-1,-2,-1,-2,1,2,1,2};
        int [] dy={-2,-1,2,1,-2,-1,2,1};
        boolean visited[][];
        visited=new boolean[A+1][B+1];
        x1=C;
        y1=D;
        xf=E;
        yf=F;
        
        Queue<Coordinate>q=new LinkedList<>();
        q.add(new Coordinate(x1,y1));
        visited[x1][y1]=true;
        
        while(!q.isEmpty())
        {
            size=q.size();
            for(i=0;i<size;i++)
            {
                Coordinate curr=q.remove();
                if(curr.x==xf && curr.y==yf)
                {
                    return(moveCnt);
                }
                
                for(j=0;j<8;j++)
                {
                    if(isValid(curr.x+dx[j],curr.y+dy[j],A,B) && visited[curr.x+dx[j]][curr.y+dy[j]]==false)
                    {
                        q.add(new Coordinate(curr.x+dx[j],curr.y+dy[j]));
                        visited[curr.x+dx[j]][curr.y+dy[j]]=true;
                    }
                }
            }
            moveCnt++;
        }
        return(-1);
    }
    
    public boolean isValid(int x,int y,int M,int N)
    {
        if(x<=0 || y<=0 || x>M || y>N)
        {
            return(false);
        }
        return(true);
    }
}

class Coordinate
{
    public int x,y;
    
    public Coordinate(int x,int y)
    {
        this.x=x;
        this.y=y;
    }
}
