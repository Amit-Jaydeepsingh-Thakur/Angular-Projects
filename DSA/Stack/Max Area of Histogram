Link-https://www.interviewbit.com/problems/largest-rectangle-in-histogram/

public class Solution {
    public int largestRectangleArea(int[] A) 
    {
        Stack<int[]>stack=new Stack<>();
        List<Integer>list=new ArrayList<>();
        Stack<int[]>stackL=new Stack<>();
        List<Integer>listL=new ArrayList<>();
        int i=0,j=0,first=0,second=0,max=0;
        
        for(i=A.length-1;i>=0;i--)
        {
            if(stack.size()==0)
            {
                list.add(A.length);
            }
            else if(stack.size()>0)
            {
                int []arr=stack.peek();
                 first=arr[0];
                 second=arr[1];
                if(first<A[i])
                {
                    list.add(second);
                }
                else if(first>=A[i])
                {
                    while(stack.size()>0 && stack.peek()[0]>=A[i])
                    {
                        stack.pop();
                    }
                    // System.out.println(stack.size()+" "+i);
                    if(stack.size()==0)
                    {
                        list.add(A.length);
                    }
                    else
                    {
                        int []b=stack.peek();
                        // System.out.print(b[0]+" "+b[1]);
                        list.add(b[1]);
                    }
                }
            }
            stack.push(new int[]{A[i],i});
        }
        
        Collections.reverse(list);
        i=0;
        
        for(i=0;i<A.length;i++)
        {
            if(stackL.size()==0)
            {
                listL.add(-1);
            }
            else if(stackL.size()>0)
            {
                int []arr=stackL.peek();
                 first=arr[0];
                 second=arr[1];
                if(first<A[i])
                {
                    listL.add(second);
                }
                else if(first>=A[i])
                {
                    while(stackL.size()>0 && stackL.peek()[0]>=A[i])
                    {
                        stackL.pop();
                    }
                    if(stackL.size()==0)
                    {
                        listL.add(-1);
                    }
                    else
                    {
                        int []b=stackL.peek();
                        //list.add(b[1]);
                        listL.add(b[1]);
                    }
                }
            }
            stackL.push(new int[]{A[i],i});
        }
        
        //List<Integer>width=new ArrayList<>();
        //System.out.println(list);
        //System.out.println(listL);
        int width[];
        width=new int[list.size()];
        for(i=0;i<list.size();i++)
        {
            width[i]=(list.get(i)-listL.get(i)-1);
        }
        
        List<Integer>area=new ArrayList<>();
        
        for(i=0;i<A.length;i++)
        {
            area.add(width[i]*A[i]);
        }
        
        for(i=0;i<area.size();i++)
        {
            max=Math.max(max,area.get(i));
        }
        
        return(max);
    }
}
